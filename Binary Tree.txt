#include <iostream>
#include <queue>
using namespace std;

class node {
public:
    node* left;
    node* right;
    int data;

    node(int i) {
        data = i;
        left = NULL;
        right = NULL;
    }
};

node* insert_in_binary_tree(node* root, int i) {
    if (root == NULL) {
        node* newnode = new node(i);
        root = newnode;
        return root;
    }

    else {
        node* newnode = new node(i);

        queue<node*> q;
        q.push(root);

        while (!q.empty()) {
            node* temp = q.front();
            q.pop();
            if (temp->left != NULL) {
                q.push(temp->left);
            }
            else {
                temp->left = newnode;
                return root;
            }

            if (temp->right != NULL) {
                q.push(temp->right);
            }
            else {
                temp->right = newnode;
                return root;
            }
        }
    }
}

void inorder(node* temp)
{
    if (temp == NULL)
        return;

    inorder(temp->left);
    cout << temp->data << ' ';
    inorder(temp->right);
}

void display(node* current_node) {
    if (current_node != NULL) {
        cout << current_node->data << endl;
        display(current_node->left);
        display(current_node->right);
    }
}

int main() {
    node* root = new node(15);
	
    root = insert_in_binary_tree(root, 17);
    root = insert_in_binary_tree(root, 14);
    root = insert_in_binary_tree(root, 22);
    root = insert_in_binary_tree(root, 11);
    root = insert_in_binary_tree(root, 3);
    root = insert_in_binary_tree(root, 7);

    display(root);
}
